#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Real_Estate_App.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RealEstate")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAppointmentTbl(AppointmentTbl instance);
    partial void UpdateAppointmentTbl(AppointmentTbl instance);
    partial void DeleteAppointmentTbl(AppointmentTbl instance);
    partial void InsertBuy(Buy instance);
    partial void UpdateBuy(Buy instance);
    partial void DeleteBuy(Buy instance);
    partial void InsertChoosenProperty(ChoosenProperty instance);
    partial void UpdateChoosenProperty(ChoosenProperty instance);
    partial void DeleteChoosenProperty(ChoosenProperty instance);
    partial void InsertClientTbl(ClientTbl instance);
    partial void UpdateClientTbl(ClientTbl instance);
    partial void DeleteClientTbl(ClientTbl instance);
    partial void InsertContractor(Contractor instance);
    partial void UpdateContractor(Contractor instance);
    partial void DeleteContractor(Contractor instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertEmployeeTbl(EmployeeTbl instance);
    partial void UpdateEmployeeTbl(EmployeeTbl instance);
    partial void DeleteEmployeeTbl(EmployeeTbl instance);
    partial void InsertPropertyTbl(PropertyTbl instance);
    partial void UpdatePropertyTbl(PropertyTbl instance);
    partial void DeletePropertyTbl(PropertyTbl instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Real_Estate_App.Properties.Settings.Default.RealEstateConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AppointmentTbl> AppointmentTbls
		{
			get
			{
				return this.GetTable<AppointmentTbl>();
			}
		}
		
		public System.Data.Linq.Table<Buy> Buys
		{
			get
			{
				return this.GetTable<Buy>();
			}
		}
		
		public System.Data.Linq.Table<ChoosenProperty> ChoosenProperties
		{
			get
			{
				return this.GetTable<ChoosenProperty>();
			}
		}
		
		public System.Data.Linq.Table<ClientTbl> ClientTbls
		{
			get
			{
				return this.GetTable<ClientTbl>();
			}
		}
		
		public System.Data.Linq.Table<Contractor> Contractors
		{
			get
			{
				return this.GetTable<Contractor>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeTbl> EmployeeTbls
		{
			get
			{
				return this.GetTable<EmployeeTbl>();
			}
		}
		
		public System.Data.Linq.Table<PropertyTbl> PropertyTbls
		{
			get
			{
				return this.GetTable<PropertyTbl>();
			}
		}
		
		public System.Data.Linq.Table<PropertyPhoto> PropertyPhotos
		{
			get
			{
				return this.GetTable<PropertyPhoto>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Appointment")]
	public partial class AppointmentTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _AppointmentDate;
		
		private string _Comment;
		
		private int _ClientID;
		
		private int _AgentID;
		
		private EntitySet<ChoosenProperty> _ChoosenProperties;
		
		private EntityRef<ClientTbl> _ClientTbl;
		
		private EntityRef<EmployeeTbl> _EmployeeTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAppointmentDateChanging(System.DateTime value);
    partial void OnAppointmentDateChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnAgentIDChanging(int value);
    partial void OnAgentIDChanged();
    #endregion
		
		public AppointmentTbl()
		{
			this._ChoosenProperties = new EntitySet<ChoosenProperty>(new Action<ChoosenProperty>(this.attach_ChoosenProperties), new Action<ChoosenProperty>(this.detach_ChoosenProperties));
			this._ClientTbl = default(EntityRef<ClientTbl>);
			this._EmployeeTbl = default(EntityRef<EmployeeTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AppointmentDate", DbType="DateTime NOT NULL")]
		public System.DateTime AppointmentDate
		{
			get
			{
				return this._AppointmentDate;
			}
			set
			{
				if ((this._AppointmentDate != value))
				{
					this.OnAppointmentDateChanging(value);
					this.SendPropertyChanging();
					this._AppointmentDate = value;
					this.SendPropertyChanged("AppointmentDate");
					this.OnAppointmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._ClientTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgentID", DbType="Int NOT NULL")]
		public int AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._EmployeeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_ChoosenProperty", Storage="_ChoosenProperties", ThisKey="ID", OtherKey="ID")]
		public EntitySet<ChoosenProperty> ChoosenProperties
		{
			get
			{
				return this._ChoosenProperties;
			}
			set
			{
				this._ChoosenProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Appointment", Storage="_ClientTbl", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public ClientTbl ClientTbl
		{
			get
			{
				return this._ClientTbl.Entity;
			}
			set
			{
				ClientTbl previousValue = this._ClientTbl.Entity;
				if (((previousValue != value) 
							|| (this._ClientTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientTbl.Entity = null;
						previousValue.AppointmentTbls.Remove(this);
					}
					this._ClientTbl.Entity = value;
					if ((value != null))
					{
						value.AppointmentTbls.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("ClientTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Appointment", Storage="_EmployeeTbl", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public EmployeeTbl EmployeeTbl
		{
			get
			{
				return this._EmployeeTbl.Entity;
			}
			set
			{
				EmployeeTbl previousValue = this._EmployeeTbl.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeTbl.Entity = null;
						previousValue.AppointmentTbls.Remove(this);
					}
					this._EmployeeTbl.Entity = value;
					if ((value != null))
					{
						value.AppointmentTbls.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(int);
					}
					this.SendPropertyChanged("EmployeeTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChoosenProperties(ChoosenProperty entity)
		{
			this.SendPropertyChanging();
			entity.AppointmentTbl = this;
		}
		
		private void detach_ChoosenProperties(ChoosenProperty entity)
		{
			this.SendPropertyChanging();
			entity.AppointmentTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Buy")]
	public partial class Buy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PropertyID;
		
		private int _ClientID;
		
		private int _AgentID;
		
		private System.DateTime _SellDate;
		
		private System.Nullable<decimal> _Comission;
		
		private EntityRef<ClientTbl> _ClientTbl;
		
		private EntityRef<EmployeeTbl> _EmployeeTbl;
		
		private EntityRef<PropertyTbl> _PropertyTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    partial void OnClientIDChanging(int value);
    partial void OnClientIDChanged();
    partial void OnAgentIDChanging(int value);
    partial void OnAgentIDChanged();
    partial void OnSellDateChanging(System.DateTime value);
    partial void OnSellDateChanged();
    partial void OnComissionChanging(System.Nullable<decimal> value);
    partial void OnComissionChanged();
    #endregion
		
		public Buy()
		{
			this._ClientTbl = default(EntityRef<ClientTbl>);
			this._EmployeeTbl = default(EntityRef<EmployeeTbl>);
			this._PropertyTbl = default(EntityRef<PropertyTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._PropertyTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientID", DbType="Int NOT NULL")]
		public int ClientID
		{
			get
			{
				return this._ClientID;
			}
			set
			{
				if ((this._ClientID != value))
				{
					if (this._ClientTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClientIDChanging(value);
					this.SendPropertyChanging();
					this._ClientID = value;
					this.SendPropertyChanged("ClientID");
					this.OnClientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgentID", DbType="Int NOT NULL")]
		public int AgentID
		{
			get
			{
				return this._AgentID;
			}
			set
			{
				if ((this._AgentID != value))
				{
					if (this._EmployeeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgentIDChanging(value);
					this.SendPropertyChanging();
					this._AgentID = value;
					this.SendPropertyChanged("AgentID");
					this.OnAgentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellDate", DbType="DateTime NOT NULL")]
		public System.DateTime SellDate
		{
			get
			{
				return this._SellDate;
			}
			set
			{
				if ((this._SellDate != value))
				{
					this.OnSellDateChanging(value);
					this.SendPropertyChanging();
					this._SellDate = value;
					this.SendPropertyChanged("SellDate");
					this.OnSellDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comission", DbType="Money")]
		public System.Nullable<decimal> Comission
		{
			get
			{
				return this._Comission;
			}
			set
			{
				if ((this._Comission != value))
				{
					this.OnComissionChanging(value);
					this.SendPropertyChanging();
					this._Comission = value;
					this.SendPropertyChanged("Comission");
					this.OnComissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Buy", Storage="_ClientTbl", ThisKey="ClientID", OtherKey="ID", IsForeignKey=true)]
		public ClientTbl ClientTbl
		{
			get
			{
				return this._ClientTbl.Entity;
			}
			set
			{
				ClientTbl previousValue = this._ClientTbl.Entity;
				if (((previousValue != value) 
							|| (this._ClientTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClientTbl.Entity = null;
						previousValue.Buys.Remove(this);
					}
					this._ClientTbl.Entity = value;
					if ((value != null))
					{
						value.Buys.Add(this);
						this._ClientID = value.ID;
					}
					else
					{
						this._ClientID = default(int);
					}
					this.SendPropertyChanged("ClientTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Buy", Storage="_EmployeeTbl", ThisKey="AgentID", OtherKey="ID", IsForeignKey=true)]
		public EmployeeTbl EmployeeTbl
		{
			get
			{
				return this._EmployeeTbl.Entity;
			}
			set
			{
				EmployeeTbl previousValue = this._EmployeeTbl.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeTbl.Entity = null;
						previousValue.Buys.Remove(this);
					}
					this._EmployeeTbl.Entity = value;
					if ((value != null))
					{
						value.Buys.Add(this);
						this._AgentID = value.ID;
					}
					else
					{
						this._AgentID = default(int);
					}
					this.SendPropertyChanged("EmployeeTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Buy", Storage="_PropertyTbl", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public PropertyTbl PropertyTbl
		{
			get
			{
				return this._PropertyTbl.Entity;
			}
			set
			{
				PropertyTbl previousValue = this._PropertyTbl.Entity;
				if (((previousValue != value) 
							|| (this._PropertyTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyTbl.Entity = null;
						previousValue.Buys.Remove(this);
					}
					this._PropertyTbl.Entity = value;
					if ((value != null))
					{
						value.Buys.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("PropertyTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChoosenProperty")]
	public partial class ChoosenProperty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PropertyID;
		
		private EntityRef<AppointmentTbl> _AppointmentTbl;
		
		private EntityRef<PropertyTbl> _PropertyTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPropertyIDChanging(int value);
    partial void OnPropertyIDChanged();
    #endregion
		
		public ChoosenProperty()
		{
			this._AppointmentTbl = default(EntityRef<AppointmentTbl>);
			this._PropertyTbl = default(EntityRef<PropertyTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._AppointmentTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					if (this._PropertyTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPropertyIDChanging(value);
					this.SendPropertyChanging();
					this._PropertyID = value;
					this.SendPropertyChanged("PropertyID");
					this.OnPropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Appointment_ChoosenProperty", Storage="_AppointmentTbl", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public AppointmentTbl AppointmentTbl
		{
			get
			{
				return this._AppointmentTbl.Entity;
			}
			set
			{
				AppointmentTbl previousValue = this._AppointmentTbl.Entity;
				if (((previousValue != value) 
							|| (this._AppointmentTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AppointmentTbl.Entity = null;
						previousValue.ChoosenProperties.Remove(this);
					}
					this._AppointmentTbl.Entity = value;
					if ((value != null))
					{
						value.ChoosenProperties.Add(this);
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("AppointmentTbl");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_ChoosenProperty", Storage="_PropertyTbl", ThisKey="PropertyID", OtherKey="ID", IsForeignKey=true)]
		public PropertyTbl PropertyTbl
		{
			get
			{
				return this._PropertyTbl.Entity;
			}
			set
			{
				PropertyTbl previousValue = this._PropertyTbl.Entity;
				if (((previousValue != value) 
							|| (this._PropertyTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropertyTbl.Entity = null;
						previousValue.ChoosenProperties.Remove(this);
					}
					this._PropertyTbl.Entity = value;
					if ((value != null))
					{
						value.ChoosenProperties.Add(this);
						this._PropertyID = value.ID;
					}
					else
					{
						this._PropertyID = default(int);
					}
					this.SendPropertyChanged("PropertyTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Client")]
	public partial class ClientTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _PhoneNumber;
		
		private string _Email;
		
		private string _Password;
		
		private System.Nullable<int> _EmpId;
		
		private EntitySet<AppointmentTbl> _AppointmentTbls;
		
		private EntitySet<Buy> _Buys;
		
		private EntityRef<EmployeeTbl> _EmployeeTbl;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmpIdChanging(System.Nullable<int> value);
    partial void OnEmpIdChanged();
    #endregion
		
		public ClientTbl()
		{
			this._AppointmentTbls = new EntitySet<AppointmentTbl>(new Action<AppointmentTbl>(this.attach_AppointmentTbls), new Action<AppointmentTbl>(this.detach_AppointmentTbls));
			this._Buys = new EntitySet<Buy>(new Action<Buy>(this.attach_Buys), new Action<Buy>(this.detach_Buys));
			this._EmployeeTbl = default(EntityRef<EmployeeTbl>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpId", DbType="Int")]
		public System.Nullable<int> EmpId
		{
			get
			{
				return this._EmpId;
			}
			set
			{
				if ((this._EmpId != value))
				{
					if (this._EmployeeTbl.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmpIdChanging(value);
					this.SendPropertyChanging();
					this._EmpId = value;
					this.SendPropertyChanged("EmpId");
					this.OnEmpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Appointment", Storage="_AppointmentTbls", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<AppointmentTbl> AppointmentTbls
		{
			get
			{
				return this._AppointmentTbls;
			}
			set
			{
				this._AppointmentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Client_Buy", Storage="_Buys", ThisKey="ID", OtherKey="ClientID")]
		public EntitySet<Buy> Buys
		{
			get
			{
				return this._Buys;
			}
			set
			{
				this._Buys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Client", Storage="_EmployeeTbl", ThisKey="EmpId", OtherKey="ID", IsForeignKey=true)]
		public EmployeeTbl EmployeeTbl
		{
			get
			{
				return this._EmployeeTbl.Entity;
			}
			set
			{
				EmployeeTbl previousValue = this._EmployeeTbl.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeTbl.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeTbl.Entity = null;
						previousValue.ClientTbls.Remove(this);
					}
					this._EmployeeTbl.Entity = value;
					if ((value != null))
					{
						value.ClientTbls.Add(this);
						this._EmpId = value.ID;
					}
					else
					{
						this._EmpId = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeTbl");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentTbls(AppointmentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ClientTbl = this;
		}
		
		private void detach_AppointmentTbls(AppointmentTbl entity)
		{
			this.SendPropertyChanging();
			entity.ClientTbl = null;
		}
		
		private void attach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.ClientTbl = this;
		}
		
		private void detach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.ClientTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contractor")]
	public partial class Contractor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _PhoneNumber;
		
		private EntitySet<PropertyTbl> _PropertyTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    #endregion
		
		public Contractor()
		{
			this._PropertyTbls = new EntitySet<PropertyTbl>(new Action<PropertyTbl>(this.attach_PropertyTbls), new Action<PropertyTbl>(this.detach_PropertyTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Property", Storage="_PropertyTbls", ThisKey="ID", OtherKey="ContractorID")]
		public EntitySet<PropertyTbl> PropertyTbls
		{
			get
			{
				return this._PropertyTbls;
			}
			set
			{
				this._PropertyTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PropertyTbls(PropertyTbl entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = this;
		}
		
		private void detach_PropertyTbls(PropertyTbl entity)
		{
			this.SendPropertyChanging();
			entity.Contractor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Department()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class EmployeeTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PhoneNumber;
		
		private string _Password;
		
		private System.Data.Linq.Binary _Photo;
		
		private string _EmpType;
		
		private System.DateTime _EmpDate;
		
		private System.Nullable<int> _DepartmentID;
		
		private EntitySet<AppointmentTbl> _AppointmentTbls;
		
		private EntitySet<Buy> _Buys;
		
		private EntitySet<ClientTbl> _ClientTbls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhotoChanging(System.Data.Linq.Binary value);
    partial void OnPhotoChanged();
    partial void OnEmpTypeChanging(string value);
    partial void OnEmpTypeChanged();
    partial void OnEmpDateChanging(System.DateTime value);
    partial void OnEmpDateChanged();
    partial void OnDepartmentIDChanging(System.Nullable<int> value);
    partial void OnDepartmentIDChanged();
    #endregion
		
		public EmployeeTbl()
		{
			this._AppointmentTbls = new EntitySet<AppointmentTbl>(new Action<AppointmentTbl>(this.attach_AppointmentTbls), new Action<AppointmentTbl>(this.detach_AppointmentTbls));
			this._Buys = new EntitySet<Buy>(new Action<Buy>(this.attach_Buys), new Action<Buy>(this.detach_Buys));
			this._ClientTbls = new EntitySet<ClientTbl>(new Action<ClientTbl>(this.attach_ClientTbls), new Action<ClientTbl>(this.detach_ClientTbls));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(11)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpType", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmpType
		{
			get
			{
				return this._EmpType;
			}
			set
			{
				if ((this._EmpType != value))
				{
					this.OnEmpTypeChanging(value);
					this.SendPropertyChanging();
					this._EmpType = value;
					this.SendPropertyChanged("EmpType");
					this.OnEmpTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpDate", DbType="Date NOT NULL")]
		public System.DateTime EmpDate
		{
			get
			{
				return this._EmpDate;
			}
			set
			{
				if ((this._EmpDate != value))
				{
					this.OnEmpDateChanging(value);
					this.SendPropertyChanging();
					this._EmpDate = value;
					this.SendPropertyChanged("EmpDate");
					this.OnEmpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int")]
		public System.Nullable<int> DepartmentID
		{
			get
			{
				return this._DepartmentID;
			}
			set
			{
				if ((this._DepartmentID != value))
				{
					this.OnDepartmentIDChanging(value);
					this.SendPropertyChanging();
					this._DepartmentID = value;
					this.SendPropertyChanged("DepartmentID");
					this.OnDepartmentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Appointment", Storage="_AppointmentTbls", ThisKey="ID", OtherKey="AgentID")]
		public EntitySet<AppointmentTbl> AppointmentTbls
		{
			get
			{
				return this._AppointmentTbls;
			}
			set
			{
				this._AppointmentTbls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Buy", Storage="_Buys", ThisKey="ID", OtherKey="AgentID")]
		public EntitySet<Buy> Buys
		{
			get
			{
				return this._Buys;
			}
			set
			{
				this._Buys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Client", Storage="_ClientTbls", ThisKey="ID", OtherKey="EmpId")]
		public EntitySet<ClientTbl> ClientTbls
		{
			get
			{
				return this._ClientTbls;
			}
			set
			{
				this._ClientTbls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AppointmentTbls(AppointmentTbl entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = this;
		}
		
		private void detach_AppointmentTbls(AppointmentTbl entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = null;
		}
		
		private void attach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = this;
		}
		
		private void detach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = null;
		}
		
		private void attach_ClientTbls(ClientTbl entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = this;
		}
		
		private void detach_ClientTbls(ClientTbl entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property")]
	public partial class PropertyTbl : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Address;
		
		private double _Price;
		
		private string _Type;
		
		private double _Area;
		
		private bool _Status;
		
		private int _ContractorID;
		
		private string _Description;
		
		private EntitySet<Buy> _Buys;
		
		private EntitySet<ChoosenProperty> _ChoosenProperties;
		
		private EntityRef<Contractor> _Contractor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPriceChanging(double value);
    partial void OnPriceChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnAreaChanging(double value);
    partial void OnAreaChanged();
    partial void OnStatusChanging(bool value);
    partial void OnStatusChanged();
    partial void OnContractorIDChanging(int value);
    partial void OnContractorIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PropertyTbl()
		{
			this._Buys = new EntitySet<Buy>(new Action<Buy>(this.attach_Buys), new Action<Buy>(this.detach_Buys));
			this._ChoosenProperties = new EntitySet<ChoosenProperty>(new Action<ChoosenProperty>(this.attach_ChoosenProperties), new Action<ChoosenProperty>(this.detach_ChoosenProperties));
			this._Contractor = default(EntityRef<Contractor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float NOT NULL")]
		public double Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Area", DbType="Float NOT NULL")]
		public double Area
		{
			get
			{
				return this._Area;
			}
			set
			{
				if ((this._Area != value))
				{
					this.OnAreaChanging(value);
					this.SendPropertyChanging();
					this._Area = value;
					this.SendPropertyChanged("Area");
					this.OnAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit NOT NULL")]
		public bool Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContractorID", DbType="Int NOT NULL")]
		public int ContractorID
		{
			get
			{
				return this._ContractorID;
			}
			set
			{
				if ((this._ContractorID != value))
				{
					if (this._Contractor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContractorIDChanging(value);
					this.SendPropertyChanging();
					this._ContractorID = value;
					this.SendPropertyChanged("ContractorID");
					this.OnContractorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Buy", Storage="_Buys", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<Buy> Buys
		{
			get
			{
				return this._Buys;
			}
			set
			{
				this._Buys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_ChoosenProperty", Storage="_ChoosenProperties", ThisKey="ID", OtherKey="PropertyID")]
		public EntitySet<ChoosenProperty> ChoosenProperties
		{
			get
			{
				return this._ChoosenProperties;
			}
			set
			{
				this._ChoosenProperties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contractor_Property", Storage="_Contractor", ThisKey="ContractorID", OtherKey="ID", IsForeignKey=true)]
		public Contractor Contractor
		{
			get
			{
				return this._Contractor.Entity;
			}
			set
			{
				Contractor previousValue = this._Contractor.Entity;
				if (((previousValue != value) 
							|| (this._Contractor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contractor.Entity = null;
						previousValue.PropertyTbls.Remove(this);
					}
					this._Contractor.Entity = value;
					if ((value != null))
					{
						value.PropertyTbls.Add(this);
						this._ContractorID = value.ID;
					}
					else
					{
						this._ContractorID = default(int);
					}
					this.SendPropertyChanged("Contractor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.PropertyTbl = this;
		}
		
		private void detach_Buys(Buy entity)
		{
			this.SendPropertyChanging();
			entity.PropertyTbl = null;
		}
		
		private void attach_ChoosenProperties(ChoosenProperty entity)
		{
			this.SendPropertyChanging();
			entity.PropertyTbl = this;
		}
		
		private void detach_ChoosenProperties(ChoosenProperty entity)
		{
			this.SendPropertyChanging();
			entity.PropertyTbl = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PropertyPhoto")]
	public partial class PropertyPhoto
	{
		
		private int _PropertyID;
		
		private System.Data.Linq.Binary _Photo;
		
		public PropertyPhoto()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyID", DbType="Int NOT NULL")]
		public int PropertyID
		{
			get
			{
				return this._PropertyID;
			}
			set
			{
				if ((this._PropertyID != value))
				{
					this._PropertyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Photo", DbType="VarBinary(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
